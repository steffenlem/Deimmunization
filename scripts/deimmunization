#!/usr/bin/env python

import click
import logging
import pandas as pd

from src.MSAParser.model.MSA import MSA
from src.sequence_information.SequenceInformation import SequenceInformation
from src.mutationRules.mutationRules import mutation_order_by_group
from src.PointMutation.PointMutation import PointMutation
from src.PDB_Parser_Encoder.main import parse_and_encode_pdb
from src.PDB_Parser_Encoder.add_point_mutation import do_and_return_pointmutation
from src.ddGRegressor.main import train_regressor
from src.evaluation.epitope_per_index_plot import plot_epitope_spread

console = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
LOG = logging.getLogger("Commandline parser")
LOG.addHandler(console)
LOG.setLevel(logging.INFO)


@click.command()
@click.option('-in', '--input_msa', prompt='input msa',
              help='file path to msa.txt', required=True)
@click.option('-rs', '--reference_sequence', prompt='reference sequence',
              help='titlestring of reference sequence', required=True)
@click.option('-t', '--majority_threshold', prompt='majority threshold',
              help='value between 0 and 1 to decide the consensus value', required=True, default=0.5)
@click.option('-a', '--mhc_alleles', prompt='MHC alleles',
              help='Input the MHC allele in the following form:\n MHC-I: e.g. XXX-000 \n'
                   'MHC-II: e.g. DRB1_0101\n'
                   'It is also possible (and recommended) to choose multiple alleles. The alleles '
                   'have to be comma separated. \ne.g.; DRB1_0101, DRB1_0202, DRB1_0303, ...', required=True)
@click.option('-mp', '--mhc_ii_pan', prompt='MHCIIpan',
              help='path to netMHCIIpan', required=True)
@click.option('-mt', '--number_mutations', prompt='Number of mutations',
              help='the number of mutation which should be introduced in the sequence', required=True)
@click.option('-pos', '--pos_to_check', prompt='Positions to check:',
              help='the number of positions to check to introduce a mutation in each iteration', required=True)
@click.option('-pdb', '--pdb_file', prompt='pdb file',
              help='path to pdb file', required=True)
@click.option('-cha', '--pdb_chain', prompt='pdb chain',
              help='Chain in the pdb file', required=True)
@click.option('-w', '--weight', prompt='weighting factorn',
              help='Weighting factor between deimmunization and ddG. A low value favors low immunity and a high value'
                   'favors a stable protein', required=True)
@click.option('-frq', '--allele_frequency', prompt='allele frequency',
              help='Frequency of the alleles in the target population. The frequencies have to be comma separated',
              required=True, default=1, type=str)
def main(input_msa, reference_sequence, majority_threshold, mhc_alleles, mhc_ii_pan, pdb_file, pos_to_check,
         number_mutations, pdb_chain, weight, allele_frequency):
    # Split MHC-alleles, and frequencies
    mhc_alleles = [c.strip() for c in mhc_alleles.split(',')]
    allele_frequency = [float(c.strip()) for c in allele_frequency.split(',')]
    mhc_alleles = dict(zip(mhc_alleles, allele_frequency))

    # Read contact informations from pdb-file
    encoded_pdb_informations = parse_and_encode_pdb(pdb_file, 7)

    # train regressor
    regressor = train_regressor('data/inputfiles/contact_blomap_7A.csv')

    # Construct an MSA Object, which contains the information about the MSA
    my_msa = MSA(input_msa, reference_sequence, majority_threshold)
    my_msa.write_sequnce('data/ref_sequence.fasta')

    # Information about the sequenece (eptitopes, msa, ...) is bundled
    target_sequence = SequenceInformation(my_msa.get_sequence(), my_msa.get_consensus_sequence())

    target_sequence.set_mhc_alleles(mhc_alleles)
    target_sequence.predictEpitopes(mhc_ii_pan, 'data/ref_sequence.fasta')
    target_sequence.calculate_base_immunogenicity()
    target_sequence.calculate_binding_core()
    target_sequence.calculate_binding_core_weighted()
    target_sequence.make_queue_mutation()

    # Convert settings paramerts
    number_mutations = int(number_mutations)
    pos_to_check = int(pos_to_check)

    # variables
    inital_immunigenicity = target_sequence.base_immunogenicity
    final_mutations = []
    queue = target_sequence.queue

    # deimmunization loop
    while number_mutations > len(final_mutations):
        print('Computing ' + str(len(final_mutations) + 1) + '. iteration ...')

        # create temporary sequence class
        temp_sequence = SequenceInformation(my_msa.get_sequence(), my_msa.get_consensus_sequence())
        temp_sequence.introduce_mutations(final_mutations)

        # write sequence to file for netMHCIIpan
        temp_sequence.write_sequence('data/temp.fasta')

        temp_sequence.set_mhc_alleles(mhc_alleles)
        temp_sequence.predictEpitopes(mhc_ii_pan, 'data/temp.fasta')

        # calculate temp values
        temp_sequence.calculate_base_immunogenicity()
        temp_sequence.calculate_binding_core_weighted()
        temp_sequence.make_queue_mutation()

        # Update queue
        queue = temp_sequence.queue

        # Remove already edited residues from queue
        for point_mutation in final_mutations:
            try:
                queue.remove(point_mutation.index)
            except ValueError:
                pass

        # Update immunogenicity
        current_immunogenicity = temp_sequence.base_immunogenicity

        # Indroduced muations
        current_mutations = []
        for pos in range(pos_to_check):
            # index of residue to mutate
            position = queue[pos]

            current_residue = temp_sequence.get_sequence_pos(position)
            current_amino_group = temp_sequence.msa[position][1]

            one_letter_code = ['A', 'R', 'N', 'D', 'C', 'E', 'Q', 'G', 'I', 'L', 'K', 'M', 'F', 'S', 'T', 'W', 'Y',
                               'V', 'H']

            # if t
            try:
                mutations_to_check = mutation_order_by_group[current_amino_group].copy()
            except:
                mutations_to_check = one_letter_code.copy()
                print("dafaq?")

            try:
                mutations_to_check.remove(current_residue)
            except:
                pass

            for aa in mutations_to_check:
                feature_vector_aa = do_and_return_pointmutation(encoded_pdb_informations, position + 1, pdb_chain, aa)
                feature_vector_aa = [item for sublist in feature_vector_aa for item in sublist]
                ddG_aa = regressor.predict(pd.DataFrame(data=feature_vector_aa).T)
                current_mutations.append(
                    PointMutation(aa, position, temp_sequence.update_immunogenicity(aa, position, mhc_ii_pan),
                                  ddG_aa[0], target_sequence.get_sequence_pos(position)))

        final_mutations.append(decision_function_simple(current_mutations, float(weight)))

    # Print final mutations
    for mutation in final_mutations:
        print(mutation.__str__())

    # create new sequence
    new_sequence = SequenceInformation(my_msa.get_sequence(), my_msa.get_consensus_sequence())
    new_sequence.introduce_mutations(final_mutations)
    new_sequence.write_sequence('data/new_sequence.fasta')
    new_sequence.set_mhc_alleles(mhc_alleles)
    new_sequence.predictEpitopes(mhc_ii_pan, 'data/new_sequence.fasta')
    new_sequence.calculate_base_immunogenicity()
    new_sequence.calculate_binding_core()
    new_sequence.write_sequence('data/mutated_sequence.fasta')

    print('Immunogenicity before :' + str(target_sequence.base_immunogenicity))
    print('Immunogenicity after :' + str(new_sequence.base_immunogenicity))
    print('Epitope count before :' + str(target_sequence.get_number_epitopes()))
    print('Epitope count after :' + str(new_sequence.get_number_epitopes()))

    plot_epitope_spread(target_sequence.part_of_core_pos, new_sequence.part_of_core_pos,
                        target_sequence.get_length_sequence())


def decision_function_simple(mutations, weight):
    best_mutation = PointMutation('', -1, float('inf'), float('-inf'), '')
    for mut in mutations:
        if (mut.immunogenicity - (weight * mut.ddG) < best_mutation.immunogenicity - (weight * best_mutation.ddG)) and (
                mut.immunogenicity < best_mutation.immunogenicity):
            best_mutation = mut
    return best_mutation


if __name__ == '__main__':
    main()
