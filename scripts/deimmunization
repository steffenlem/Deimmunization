#!/usr/bin/env python

import time
import numpy as np
import matplotlib.pyplot as plt
import click
import logging

from src.MSAParser.model.MSA import MSA
from src.netMHCIIpanParser.netMHCIIparser import parse_netMHCIIpan
from src.sequence_information.SequenceInformation import SequenceInformation
from src.PDB_Parser_Encoder.ddG_trainings_data_main import write_test_data_for_ddg_regression
from src.PDB_Parser_Encoder.main import parse_and_encode_pdb
from src.PDB_Parser_Encoder.add_point_mutation import do_and_return_pointmutation
from src.PDB_Parser_Encoder.add_point_mutation import three_list_to_string

console = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console.setFormatter(formatter)
LOG = logging.getLogger("Commandline parser")
LOG.addHandler(console)
LOG.setLevel(logging.INFO)


# python3 Deimmunization.py -in /home/steffen/Documents/Deimmunization/data/clustalo-I20180923-185956-0934-78103081-p2m.clustal_num.txt -rs BoNTC -t 0.5 -a DRB1_0301 -p /home/steffen/netMHCIIpan-3.2/netMHCIIpan

@click.command()
@click.option('-in', '--input_msa', prompt='input msa',
              help='file path to msa.txt', required=True)
@click.option('-rs', '--reference_sequence', prompt='reference sequence',
              help='titlestring of reference sequence', required=True)
@click.option('-t', '--majority_threshold', prompt='majority threshold',
              help='value between 0 and 1 to decide the consensus value', required=True, default=0.5)
@click.option('-ma', '--mhc_alle', prompt='mhc_alles',
              help='MHC class II allel e.g. DRB1_0101', required=False)
@click.option('-mp', '--mhc_ii_pan', prompt='MHCIIpan',
              help='path to MHCIIpan', required=False)
@click.option('-pdb', '--pdb_file', prompt='pdb file',
              help='path to pdb file', required=False)
def main(input_msa, reference_sequence, majority_threshold, mhc_alle, mhc_ii_pan, pdb_file):
    start_time = time.time()

    # write_test_data_for_ddg_regression()

    try:
        encoded_pdb_informations = parse_and_encode_pdb(pdb_file, 6)
        for i in encoded_pdb_informations:
            print(i)
    except Exception:
        LOG.error('No pdb-file given')

    mutations = []
    a_mutation = do_and_return_pointmutation(encoded_pdb_informations, 156, 'ALA')
    mutations.append(a_mutation)
    print(a_mutation)
    b_mutation = do_and_return_pointmutation(encoded_pdb_informations, 155, 'R')
    mutations.append(b_mutation)
    print(b_mutation)
    print(three_list_to_string(mutations))

    my_msa = MSA(input_msa, reference_sequence, majority_threshold)

    # parsed_data = parse_netMHCIIpan('/home/steffen/netMHCIIpan-3.2/netMHCIIpan', 'data/2wcv.fasta', 'DRB1_0301')
    #
    # # Information about the sequenece (eptitopes, msa, ...) is bundled
    #
    # sequence_info = SequenceInformation(my_msa.get_sequence(), my_msa.get_consensus_sequence())
    #
    # sequence_info.set_allel_prediction(parsed_data)
    #
    # sequence_info.get_neighbour_chunk(1282)
    #
    # print(len(sequence_info.get_sequence()))
    #
    # # TODO Transfer to separate module/class###
    # # Simple Visualization of Epitopes and binding cores
    # # TODO Integration of other allels
    # number_epitopes = np.zeros(int(parsed_data[-1][0]) + 15)
    # for x in parsed_data:
    #     for z in range(9):
    #         number_epitopes[int(x[3]) - 1 + z] = number_epitopes[int(x[3]) - 1 + z] + 1
    #
    # # Time
    # print()
    # print(time.time() - start_time, "seconds")
    #
    # print(parsed_data)
    #
    # # Plot Binding Cores
    # plt.plot(number_epitopes)
    # plt.show()


if __name__ == '__main__':
    main()
